// File Name: layout/_grid.scss
// Description: Project Structure
// Used by: app.scss
// Dependencies:
// ------------------------------------------------------------

// --------------------------------------------------
// containers
// --------------------------------------------------

// TODO: since @supports, ironically, isn't well supported,
// rewrite so that it doesn't rely on it.

@supports (display: flex) {
  .container,
  .container-full {
    @include box-sizing(border-box);
    margin-left: auto;
    margin-right: auto;
    padding-left: ($grid-spacing * 2);
    padding-right: ($grid-spacing * 2);
    width: 100%;

    .grid {
      font-size: inherit;
      letter-spacing: inherit;
      margin-left: $grid-spacing;
      margin-right: $grid-spacing;
      word-spacing: inherit;
    }
  }

  .container {
    @media (min-width: $grid-xs) {
      max-width: $grid-xs;
    }

    @media (min-width: $grid-sm) {
      max-width: $grid-sm;
    }

    @media (min-width: $grid-md) {
      max-width: $grid-md;
    }

    @media (min-width: $grid-lg) {
      max-width: $grid-lg;
    }

    @media (min-width: $grid-xlg) {
      max-width: $grid-xlg;
    }
  }

  // --------------------------------------------------
  // grid
  // --------------------------------------------------

  .grid {
    @include box-sizing(border-box);
    @include display-flex;
    @include flex-wrap;
    @include setup-whitespace;
    display: block;
    font-size: inherit;
    letter-spacing: inherit !important;
    list-style-type: none; // handle when lists are used as a grid
    margin: 0 auto;
    padding: 0;
    position: relative;
    word-spacing: normal;

    &::before,
    &::after {
      @include box-sizing(border-box);
      @include reset-whitespace;
    }
  }

  // --------------------------------------------------
  // col defaults
  // --------------------------------------------------

  [class^='col-'] {
    @include box-sizing(border-box);
    @include reset-whitespace;
    display: inline-block;
    font-size: inherit;
    letter-spacing: inherit;
    padding: $grid-spacing;
    position: relative;
    margin: 0 $grid-spacing;
    vertical-align: top;
    width: 100%;
    word-spacing: inherit;
    zoom: 1;

    &::before,
    &::after {
      @include box-sizing(border-box);
      @include reset-whitespace;
    }

    // handle grids nested in columns
    .grid {
      @include flex(1, 1, auto);
      margin: $grid-spacing;
    }
  }
}

// TODO: Not use @supports
@supports not (display: flex) {
  display: inline-block;
  zoom: 1;

  [class^='col-'] {
    .grid {
      display: block;
      float: left;
      margin: $grid-spacing;
    }
  }
}

// --------------------------------------------------
// grid generation
// --------------------------------------------------

@include make-grid(col-);

@media (min-width: $grid-xs) {
  @include make-grid(col-xs-);
}

@media (min-width: $grid-sm) {
  @include make-grid(col-sm-);
}

@media (min-width: $grid-md) {
  @include make-grid(col-md-);
}

@media (min-width: $grid-lg) {
  @include make-grid(col-lg-);
}

@media (min-width: $grid-xlg) {
  @include make-grid(col-xlg-);
}

// --------------------------------------------------
// reflex col-auto
// --------------------------------------------------

.col-auto {
  @include setup-auto-cols;
}

@media (min-width: $grid-xs) {
  .col-xs-auto {
    @include setup-auto-cols;
  }
}

@media (min-width: $grid-sm) {
  .col-sm-auto {
    @include setup-auto-cols;
  }
}

@media (min-width: $grid-md) {
  .col-md-auto {
    @include setup-auto-cols;
  }
}

@media (min-width: $grid-lg) {
  .col-lg-auto {
    @include setup-auto-cols;
  }
}

@media (min-width: $grid-xlg) {
  .col-xlg-auto {
    @include setup-auto-cols;
  }
}

// --------------------------------------------------
// order helpers generation
// --------------------------------------------------

@include make-order-helpers;

@media only screen and (min-width: $grid-xs) {
  @include loop-order-helpers($grid-columns, '-xs');
}

@media only screen and (min-width: $grid-sm) {
  @include loop-order-helpers($grid-columns, '-sm');
}

@media only screen and (min-width: $grid-md) {
  @include loop-order-helpers($grid-columns, '-md');
}

@media only screen and (min-width: $grid-lg) {
  @include loop-order-helpers($grid-columns, '-lg');
}

@media only screen and (min-width: $grid-xlg) {
  @include loop-order-helpers($grid-columns, '-xlg');
}
